AWSTemplateFormatVersion: 2010-09-09
Description: Creates 3 VPCs and 3 EC2 Instances that allow ssh access
Mappings:
  Subnet1Config:
    VPC1:
      CIDR: 10.0.0.0/16
    Public:
      CIDR: 10.0.0.0/24
    Public1:
      CIDR: 10.0.1.0/24
    Public2:
      CIDR: 10.0.2.0/24
  Subnet2Config:
    VPC2:
      CIDR: 10.10.0.0/16
    Public:
      CIDR: 10.10.0.0/24
    Public1:
      CIDR: 10.10.1.0/24
    Public2:
      CIDR: 10.10.2.0/24
  Subnet3Config:
    VPC3:
      CIDR: 10.20.0.0/16
    Public:
      CIDR: 10.20.0.0/24
    Public1:
      CIDR: 10.20.1.0/24
    Public2:
      CIDR: 10.20.2.0/24
Resources:
  VPC1:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap
        - Subnet1Config
        - VPC1
        - CIDR
      Tags:
        - Key: Name
          Value: Iron City
  VPC2:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap
        - Subnet2Config
        - VPC2
        - CIDR
      Tags:
        - Key: Name
          Value: Lapis City
  VPC3:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap
        - Subnet3Config
        - VPC3
        - CIDR
      Tags:
        - Key: Name
          Value: Ruby City
  VPC1PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs us-east-1
      MapPublicIpOnLaunch: 'true'
      CidrBlock: !FindInMap 
        - Subnet1Config
        - Public
        - CIDR
      Tags:
        - Key: Name
          Value: IronCitySubnet1
  VPC1PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs us-east-1
      MapPublicIpOnLaunch: 'true'
      CidrBlock: !FindInMap 
        - Subnet1Config
        - Public1
        - CIDR
      Tags:
        - Key: Name
          Value: IronCitySubnet2
  VPC1PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs us-east-1
      MapPublicIpOnLaunch: 'true'
      CidrBlock: !FindInMap 
        - Subnet1Config
        - Public2
        - CIDR
      Tags:
        - Key: Name
          Value: IronCitySubnet3
  VPC2PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs us-east-1
      MapPublicIpOnLaunch: 'true'
      CidrBlock: !FindInMap 
        - Subnet2Config
        - Public
        - CIDR
      Tags:
        - Key: Name
          Value: LapisCitySubnet1
  VPC2PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs us-east-1
      MapPublicIpOnLaunch: 'true'
      CidrBlock: !FindInMap 
        - Subnet2Config
        - Public1
        - CIDR
      Tags:
        - Key: Name
          Value: LapisCitySubnet2
  VPC2PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs us-east-1
      MapPublicIpOnLaunch: 'true'
      CidrBlock: !FindInMap 
        - Subnet2Config
        - Public2
        - CIDR
      Tags:
        - Key: Name
          Value: LapisCitySubnet3
  VPC3PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC3
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs us-east-1
      MapPublicIpOnLaunch: 'true'
      CidrBlock: !FindInMap 
        - Subnet3Config
        - Public
        - CIDR
      Tags:
        - Key: Name
          Value: RubyCitySubnet1
  VPC3PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC3
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs us-east-1
      MapPublicIpOnLaunch: 'true'
      CidrBlock: !FindInMap 
        - Subnet3Config
        - Public1
        - CIDR
      Tags:
        - Key: Name
          Value: RubyCitySubnet2
  VPC3PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC3
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs us-east-1
      MapPublicIpOnLaunch: 'true'
      CidrBlock: !FindInMap 
        - Subnet3Config
        - Public2
        - CIDR
      Tags:
        - Key: Name
          Value: RubyCitySubnet3
  InternetGateway1:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: IronIGW
        - Key: Network
          Value: Public
  InternetGateway2:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: LapisIGW
        - Key: Network
          Value: Public
  InternetGateway3:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: RubyIGW
        - Key: Network
          Value: Public
  GatewayToInternet1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref InternetGateway1
  GatewayToInternet2:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC2
      InternetGatewayId: !Ref InternetGateway2
  GatewayToInternet3:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC3
      InternetGatewayId: !Ref InternetGateway3
  PublicRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: IronRT
  PublicRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: LapisRT
  PublicRouteTable3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC3
      Tags:
        - Key: Name
          Value: RubyRT
  PublicRoute1:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet1
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1
  PublicRoute2:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet2
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway2
  PublicRoute3:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet3
    Properties:
      RouteTableId: !Ref PublicRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway3
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPC1PublicSubnet
      RouteTableId: !Ref PublicRouteTable1
  PublicSubnet1RouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPC1PublicSubnet1
      RouteTableId: !Ref PublicRouteTable1
  PublicSubnet1RouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPC1PublicSubnet2
      RouteTableId: !Ref PublicRouteTable1
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPC2PublicSubnet
      RouteTableId: !Ref PublicRouteTable2
  PublicSubnet2RouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPC2PublicSubnet1
      RouteTableId: !Ref PublicRouteTable2
  PublicSubnet2RouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPC2PublicSubnet2
      RouteTableId: !Ref PublicRouteTable2
  PublicSubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPC3PublicSubnet
      RouteTableId: !Ref PublicRouteTable3
  PublicSubnet3RouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPC3PublicSubnet1
      RouteTableId: !Ref PublicRouteTable3
  PublicSubnet3RouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPC3PublicSubnet2
      RouteTableId: !Ref PublicRouteTable3
  PublicNetworkAcl1:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: IronNACL
        - Key: Network
          Value: Public
  PublicNetworkAcl2:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: LapisNACL
        - Key: Network
          Value: Public
  PublicNetworkAcl3:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC3
      Tags:
        - Key: Name
          Value: RubyNACL
        - Key: Network
          Value: Public
  InboundHTTPPublicNetworkAcl1Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl1
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSPublicNetworkAcl1Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl1
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundSSHPublicNetworkAcl1Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl1
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundEmphemeralPublicNetworkAcl1Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl1
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPublicNetworkAcl1Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl1
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  InboundHTTPPublicNetworkAcl2Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl2
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSPublicNetworkAcl2Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl2
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundSSHPublicNetworkAcl2Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl2
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundEmphemeralPublicNetworkAcl2Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl2
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPublicNetworkAcl2Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl2
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  InboundHTTPPublicNetworkAcl3Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl3
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSPublicNetworkAcl3Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl3
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundSSHPublicNetworkAcl3Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl3
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundEmphemeralPublicNetworkAcl3Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl3
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPublicNetworkAcl3Entry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl3
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PublicSubnet1NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref VPC1PublicSubnet
      NetworkAclId: !Ref PublicNetworkAcl1
  PublicSubnet2NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref VPC2PublicSubnet
      NetworkAclId: !Ref PublicNetworkAcl2
  PublicSubnet3NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref VPC3PublicSubnet
      NetworkAclId: !Ref PublicNetworkAcl3
  EC2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t3.micro
      ImageId: 'ami-090fa75af13c156b4'
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash
            'echo ''cloud_user:%password%'' | chpasswd'
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<html><h1>Instance Data</h1><h3>Availability Zone: " > /var/www/html/index.html
            curl http://169.254.169.254/latest/meta-data/placement/availability-zone >> /var/www/html/index.html
            echo "</h3><h3>Instance Id: " >> /var/www/html/index.html
            curl http://169.254.169.254/latest/meta-data/instance-id >> /var/www/html/index.html
            echo "</h3><h3>Public IP: " >> /var/www/html/index.html
            curl http://169.254.169.254/latest/meta-data/public-ipv4 >> /var/www/html/index.html
            echo "</h3><h3>Local IP: " >> /var/www/html/index.html
            curl http://169.254.169.254/latest/meta-data/local-ipv4 >> /var/www/html/index.html
            echo "</h3></html> " >> /var/www/html/index.html
            echo 'setup done.' > /home/cloud_user/status
            'chown cloud_user:cloud_user /home/cloud_user/status'
      NetworkInterfaces:
        - GroupSet:
            - !Ref EC2SecurityGroup1
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref VPC1PublicSubnet
      Tags:
        - Key: Name
          Value: IronCityEC2
        - Key: Environment
          Value: Prod
  EC2SecurityGroup1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: EC2SecurityGroupPublic
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
      GroupName: IronCitySG
      Tags:
        - Key: Name
          Value: IronCitySG
  EC2Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t3.micro
      ImageId: 'ami-090fa75af13c156b4'
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash
            'echo ''cloud_user:%password%'' | chpasswd'
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<html><h1>Instance Data</h1><h3>Availability Zone: " > /var/www/html/index.html
            curl http://169.254.169.254/latest/meta-data/placement/availability-zone >> /var/www/html/index.html
            echo "</h3><h3>Instance Id: " >> /var/www/html/index.html
            curl http://169.254.169.254/latest/meta-data/instance-id >> /var/www/html/index.html
            echo "</h3><h3>Public IP: " >> /var/www/html/index.html
            curl http://169.254.169.254/latest/meta-data/public-ipv4 >> /var/www/html/index.html
            echo "</h3><h3>Local IP: " >> /var/www/html/index.html
            curl http://169.254.169.254/latest/meta-data/local-ipv4 >> /var/www/html/index.html
            echo "</h3></html> " >> /var/www/html/index.html
            echo 'setup done.' > /home/cloud_user/status
            'chown cloud_user:cloud_user /home/cloud_user/status'
      NetworkInterfaces:
        - GroupSet:
            - !Ref EC2SecurityGroup2
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref VPC2PublicSubnet
      Tags:
        - Key: Name
          Value: LapisCityEC2
        - Key: Environment
          Value: Prod
  EC2SecurityGroup2:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: EC2SecurityGroupPublic
      VpcId: !Ref VPC2
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
      GroupName: LapisCitySG
      Tags:
        - Key: Name
          Value: LapisCitySG
  EC2Instance3:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t3.micro
      ImageId: 'ami-090fa75af13c156b4'
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash
            'echo ''cloud_user:%password%'' | chpasswd'
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<html><h1>Instance Data</h1><h3>Availability Zone: " > /var/www/html/index.html
            curl http://169.254.169.254/latest/meta-data/placement/availability-zone >> /var/www/html/index.html
            echo "</h3><h3>Instance Id: " >> /var/www/html/index.html
            curl http://169.254.169.254/latest/meta-data/instance-id >> /var/www/html/index.html
            echo "</h3><h3>Public IP: " >> /var/www/html/index.html
            curl http://169.254.169.254/latest/meta-data/public-ipv4 >> /var/www/html/index.html
            echo "</h3><h3>Local IP: " >> /var/www/html/index.html
            curl http://169.254.169.254/latest/meta-data/local-ipv4 >> /var/www/html/index.html
            echo "</h3></html> " >> /var/www/html/index.html
            echo 'setup done.' > /home/cloud_user/status
            'chown cloud_user:cloud_user /home/cloud_user/status'
      NetworkInterfaces:
        - GroupSet:
            - !Ref EC2SecurityGroup3
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref VPC3PublicSubnet
      Tags:
        - Key: Name
          Value: RubyCityEC2
        - Key: Environment
          Value: Prod
  EC2SecurityGroup3:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: EC2SecurityGroupPublic
      VpcId: !Ref VPC3
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
      GroupName: RubyCitySG
      Tags:
        - Key: Name
          Value: RubyCitySG
Outputs:
  Pub1IpAddress1:
    Value: !GetAtt
      - EC2Instance1
      - PublicIp
  Pub2IpAddress1:
    Value: !GetAtt
      - EC2Instance2
      - PublicIp
  Pub3IpAddress1:
    Value: !GetAtt
      - EC2Instance3
      - PublicIp
